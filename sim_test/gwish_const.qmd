---
title: "G-Wishart Constant"
format: html
---

```{r include = FALSE, error = FALSE, message = FALSE, warning = FALSE}
#For rcm
library(Rcpp)
library(RcppArmadillo)
library(glasso)
library(GIGrvg)
library(bayesRCM)
library(doParallel)

#Display
library(tidyverse)
library(gt)
library(igraph)
library(ggraph)
#library(brainconn)
library(tidygraph)
#library(Matrix)

#Controlling figure output in markdown, setting options & root dir
knitr::opts_chunk$set(
#  fig.height =   
  fig.width = 6,
#  fig.asp = .5,
  out.width = "90%",
#  out.height = 
 fig.align = "center",
  cache = FALSE,
  echo  = TRUE,
  root.dir = rprojroot::find_package_root_file() #not working?
)

#My Colours (from viridis)
my_purple <- "#440154FF"
my_yellow <- "#FDE725FF"
#Set Theme for ggplot2
theme_set(theme_minimal() + 
          theme(plot.title = element_text(hjust = 0.5),
                plot.subtitle = element_text(hjust = 0.5),
                legend.position = "bottom",
                plot.background  = element_rect(fill = "white", colour = "white")
                )
          )
#Set Scientific notation output for knitr
options(scipen = 999)
```

# Simulate Data  

Re-write `sim_data.R` so it's a fully connected network  

```{r}
sim_data <- function(subjects = 20, volumes = 200, rois = 10, prop_true_con = 1/5, trunc = c(0, 100),
                     alpha_tau = 50, lambda_2 = 2/5, n_flip = 1, seed_0 = 4, seed_k = 4, write = FALSE) {

   #subjects = 1; volumes = 200; rois = 10; prop_true_con = 1; trunc = c(0, 100);
   #alpha_tau = 25; lambda_2  = alpha_tau / 50; n_flip = 1; seed_0 = 4; seed_k = 1; 
  #A. G_0 --> Omega_0
  ##1. Start with diagonal p x p matrix
  G_0 <- diag(1, rois)
  
  ##2. To induce relative sparsity, make every 3rd off diagonal an edge
  #G_0[upper.tri(G_0)][seq(1, (subjects * (subjects - 1) / 2), by = 3)] <- TRUE 
  #G_0[upper.tri(G_0)] <- (rbinom(length(G_0[upper.tri(G_0)]), 1, prob = true_con / length(G_0[upper.tri(G_0)])) == 1)
  upper_G0 <- upper.tri(G_0, diag = FALSE)
  set.seed(seed_0)
  #G_0[upper_G0][seq(1, length(upper_G0), by = floor(1 / prop_true_con))] <- TRUE
  G_0[upper_G0] <- rbinom(sum(upper_G0), 1, prob = prop_true_con)
  
  ##3. Enforce symmetry by the upper trial
  G_0         <- G_0 + t(G_0) - diag(1, rois) #Subtract extra 1 from diagonal
  G_0_logical <- (G_0 == 1) #Make logical for below
  
  #Check rowise proportion of true connections so no dangling nodes
  #sum(G_0[upper_G0]) #43 true out of 190 off-diagonals
  #mean(G_0[upper_G0]) #~22% true connections
  #(apply(G_0, 2, sum) - 1)  #Number of true connections per ROI/row, all at least 2
  
  ##.4 Generate Omega_0 from G_0 (via Lin's simu_data.R schema)
  #Sample
  #set.seed(seed_0)
  sample <- runif(rois^2, 0.5, 1)
  #set.seed(seed_0)
  sample <- sample * sample(c(-1, 1), rois^2, replace = TRUE)
  
  #Threshold by G_0
  init     <- diag(0.5, rois) + G_0 * matrix(sample, nrow = rois, ncol = rois)
  init_sym <- init + t(init) + diag(rowSums(G_0 + t(G_0))/2) #Ensure symmetry & p.d. X + t(X) + diag()
  
  #True Omega_0 Precision/Partial Corr.
  Omega_0 <- diag(diag(init_sym)^-0.1) %*% init_sym %*% diag(diag(init_sym)^-0.1) #This step is inducing non p.d.
  Sigma_0 <- solve(Omega_0)
  Sigma_0 %>% round(., 2)
  
  # #Check positive definite
  # if (any(eigen(Omega_0, only.values = TRUE)$values <= 0)) { 
  #   #Warning
  #   warning("Warning: Omega_0 not p.d.")
  #   Omega_0 <- as.matrix(Matrix::nearPD(Omega_0)$mat)
  # }
  # 
  # #True Sigma_0 Covariance/Correlation
  # Sigma_0 <- solve(Omega_0)
  
  ##B. G_k, Omega_k ~ GWish(G_k, tau_k, Omega_0/tau_k)
  #Set up storage and params
  G_k       <- list()
  Omega_k   <- list()
  Sigma_k   <- list()
  Tau_k     <- vector(mode = "numeric", length = subjects)
  n_edges   <- n_flip #Off diagonal elements to flip/change for each subject
  #alpha_tau <- subjects #Fixed shape parameter for inv_tauk
  #lambda_2  <- subjects / 50 #inv tau from inv gamma => scale 50/subjects tau, E[tau_1:k] = subjects * (1/lam2) = 50
  
  #Random starting seed for G_k/Omega_k sim
  set.seed(seed_k)
  #This value unique just once
  #set.seed works through for-loop, only need once 
  
  #Loop through subjects
  for (k in 1:subjects) {
    #Sample number of edges to flip
    #n_edges <- sample(1, c(2, 4, 6, 8))
    
    #Sample an off diagonal element / edge to flip
    new_edges <- sample(1:(rois * (rois - 1) / 2), n_edges)
    
    #1. (G_k) Randomly add or remove n_edge # of edges in upper.tri(G_0) to generate
    G_k[[k]] <- G_0_logical
    if(n_flip != 0) {
      G_k[[k]][upper.tri(G_k[[k]], diag = FALSE)][new_edges] <- !G_k[[k]][upper.tri(G_k[[k]], diag = FALSE)][new_edges] #Flip those upper tri edges
    }
    G_k[[k]] <- as.matrix(Matrix::forceSymmetric(G_k[[k]], uplo = "U"))
    
    # #Check to make sure working appropriately
    # if (sum(G_k[[k]] != G_0) != 2 * n_edges) {
    #   warning("woops! Something's wrong, not flipping the desired number of edges.")
    # }
    
    #2. (Tau_k) Randomly sim from truncated, left tailed gamma 
    #set.seed(new_seed)
    Tau_k[k] <- trunc[2] - truncdist::rtrunc(spec = "gamma", a = trunc[1], b = trunc[2],
                                             n = 1, shape = alpha_tau, rate = lambda_2)

    #3. (Omega_k) ~ GWish(G_k, Tau_k, Omega_0/Tau_k) => Omega_k^{-1} = Sigma_0 for mvtnorm
    tri_adj <- G_k[[k]]
    tri_adj[lower.tri(tri_adj, diag = TRUE)] <- FALSE #Only upper tri adj for rgwish
    
    #Set seed & sample from RGwish
    #set.seed(new_seed)
    Omega_k[[k]] <- BDgraph::rgwish(1, adj = tri_adj, b = Tau_k[k] + 2, D = Sigma_0 * Tau_k[k])
    Sigma_k[[k]] <- solve(Omega_k[[k]])
  }
  
  ##C. (Y_ki) Data itself (data_list of length k subjects)
  #Create data list 
  data_list <- list()
  
  #Loop through subjects and volumes to generate data
  for (k in 1:subjects) { #assumes no temporal mean trend, centered at 0
    #set.seed(random_start + k)
    data_list[[k]] <- mvtnorm::rmvnorm(volumes, rep(0, rois), Sigma_k[[k]])
  }
  
  #D. True parameters
  true_params <-
    list(
      omega_0   = Omega_0,
      omega_k   = Omega_k,
      tau_k     = Tau_k,
      alpha_tau = alpha_tau,
      lambda_2  = lambda_2
    )
  
  #E. Simulation Settings
  sim_settings <-
    tibble( 
      subjects  = subjects,
      volumes   = volumes,
      rois      = rois,
      prop_true_con = prop_true_con,
      n_flip    = n_flip
    )
  
  #F. Return list of data and true params
  return(list(data_list = data_list, true_params = true_params, sim_settings = sim_settings))
  
}

```

```{r}
sim_list <- sim_data(subjects = 1, prop_true_con = 1, seed_k = 40, alpha_tau = 25, lambda_2 = 0.5, n_flip = 0)
data     <- sim_list$data_list[[1]]
params   <- sim_list$true_params
omega_0  <- params$omega_0
omega_k  <- params$omega_k[[1]] %>% round(10)
tau_k    <- params$tau_k
alpha    <- params$alpha_tau
lam2     <- params$lambda_2

#Check full connection
all(abs(omega_0) > 0.001)
50 - sum(abs(omega_k) > 0.001) / 2 #one place where it differs

#Graph
#true_graph <- abs(omega_0) > 0.001
true_graph <- abs(omega_k) > 0.001
```


```{r}
#G-wish kernel (unnormalized)
b   <- max(tau_k + 2, 3)
nu  <- b + 10 - 1
D   <- matinv(omega_0) * tau_k
D_wish <- matinv(D)
log_gwish <- ((b - 2) / 2) * log(matdet(omega_k)) - (mattr(matprod(D, omega_k)) / 2)
log_gnorm <- BDgraph::gnorm(true_graph, b = b, D = D)
log_total <- log_gwish - log_gnorm
log_wish  <- LaplacesDemon::dwishart(omega_k, nu, D_wish, log = TRUE)

#Non-log
total     <- exp(log_gwish) / exp(log_gnorm)
wish      <- exp(log_wish)

#Discrepancy between |Omega|^((b-2)/2) in gwish vs. |Omega|^((nu - k - 1)/2)
print("Log G-wish:")
log_gwish
log_gnorm
log_total
total

print("Log Wish:")
log_wish
wish

print("Dif:")
abs(log_total - log_wish)
abs(total - wish)

#See what happens when random sample from the packages, full G should ~ Wishart
D <- diag(1, 10)
set.seed(1)
gwish <- BDgraph::rgwish(1, adj = test_graph, b = b, D)

set.seed(1)
wish <- LaplacesDemon::rwishart(b, D)

abs(gwish - wish) > 0.001

```
